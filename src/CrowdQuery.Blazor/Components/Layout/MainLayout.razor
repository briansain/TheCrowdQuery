@inherits LayoutComponentBase


<MudThemeProvider Theme="primaryTheme" IsDarkMode="true" />
@code{
    MudTheme primaryTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = Colors.Blue.Darken1,
            PrimaryLighten = Colors.Blue.Default,
            PrimaryDarken = Colors.Blue.Darken2,

            Secondary = Colors.Amber.Darken1,
            SecondaryLighten = Colors.Amber.Default,
            SecondaryDarken = Colors.Amber.Darken2,

            Info = Colors.LightGreen.Default,
            Success = Colors.Blue.Default,

            AppbarBackground = Colors.Green.Darken2
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Darken1,
            PrimaryLighten = Colors.Blue.Default,
            PrimaryDarken = Colors.Blue.Darken2,

            Secondary = Colors.Amber.Darken1,
            SecondaryLighten = Colors.Amber.Default,
            SecondaryDarken = Colors.Amber.Darken2,

            Info = Colors.LightGreen.Default,
            Success = Colors.Blue.Default,

            AppbarBackground = Colors.Green.Darken2
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidthLeft = "260px",
            DrawerWidthRight = "260px"
        }
    };
}
<MudPopoverProvider />
<MudDialogProvider />

<MudLayout>
    <NavMenu />
    <MudMainContent>
        <div class="">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool _drawerOpen = false;
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}